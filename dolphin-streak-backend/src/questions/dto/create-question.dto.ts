import { Type } from "class-transformer";
import {
    IsArray,
    IsBoolean,
    IsEnum,
    IsMongoId,
    IsNotEmpty,
    IsString,
    MaxLength,
    ValidateNested,
} from "class-validator";
import { ValidateAnswerOptions } from "../decorators/answer-options.decorator";
import { ValidateCorrectAnswer } from "../decorators/correct-answer.decorator";
import { QuestionType } from "../schemas/question.schema";
import { ApiProperty } from "@nestjs/swagger";

class QuestionDetailDto {
    @IsString()
    @MaxLength(50)
    type: string;

    @IsString()
    @MaxLength(500)
    text: string;

    @IsString()
    @MaxLength(500)
    voice: string;
}

export class CreateQuestionDto {
    @ApiProperty({
        type: Object,
        description: "The question detail",
        example: {
            type: "text",
            text: "What is the capital of Germany?",
            voice: "https://voice.com/germany.mp3",
        },
    })
    @ValidateNested()
    @Type(() => QuestionDetailDto)
    question: QuestionDetailDto;

    @ApiProperty({
        type: Number,
        description: "The type of the question, this is an enum.",
        example: QuestionType.MULTIPLE_CHOICE,
    })
    @IsEnum(QuestionType)
    @IsNotEmpty()
    type: QuestionType;

    @ApiProperty({
        type: Array,
        description:
            "The answer options for the question. This should be filled when the question type is multiple choice.",
        example: [
            "Germany",
            "Deutschland",
            "Berlin",
            "Munich",
        ],
    })
    @IsArray()
    @IsNotEmpty()
    @ValidateAnswerOptions()
    answerOptions: string[];

    @ApiProperty({
        description:
            "The correct answer for the question. This should be filled with number when the question type is multiple choice, and string when the question type is other",
        example: 2,
    })
    @IsNotEmpty()
    @ValidateCorrectAnswer()
    correctAnswer: number | string;

    @ApiProperty({
        type: Boolean,
        description:
            "The use AI flag for the question, note that use AI doesn't mean content is generated by AI, rather the answer is checked by AI.",
        example: true,
    })
    @IsBoolean()
    @IsNotEmpty()
    useAi: boolean;

    @ApiProperty({
        type: Array,
        description: "Which courses this question belongs to",
        example: ["67337d95efc0db11932081fb", "67337db4efc0db1193208204"],
    })
    @IsArray()
    @IsMongoId({ each: true })
    courses: string[];
}
