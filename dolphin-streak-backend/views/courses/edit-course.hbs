{{#> layout title="Edit Course"}}
  <div class="content-wrapper">
    <div class="form-wrapper">
      <div class="form-header">
        <h1>Edit Course</h1>
      </div>
      <form id="editCourseForm">
        <div class="form-row">
          <div class="form-group">
            <label>Course Image</label>
            <img id="courseImage" src="image/blank.jpg" alt="Course Image" style="height: 300px; width: 400px;">
            <input type="file" id="courseImageInput" style="margin-top: 26px; height: 300px;">
          </div>
          <div class="form-group">
            <label>Course Name</label>
            <input type="text" id="courseName" placeholder="Course Name" required>
          </div>
        </div>
        <button type="submit" class="submit-btn">Update Course</button>
      </form>
      <a href="/courses">
        <button type="button" class="back-btn">Back</button>
      </a>
    </div>
  </div>
  <script>
    const form = document.getElementById('editCourseForm');
    const courseId = window.location.pathname.split('/').pop(); // Extract course ID from URL

    async function fetchCourseData(id) {
      try {
        const response = await fetch(`/api/courses/${id}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('secure_dolphin_streak_usr_access_token')}`
          }
        });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return await response.json();
      } catch (error) {
        console.error('Error fetching course data:', error);
        showToaster('danger', { message: 'Error fetching course data' });
        return null;
      }
    }

    async function updateCourse(id, data) {
      try {
        const response = await fetch(`/api/courses/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('secure_dolphin_streak_usr_access_token')}`
          },
          body: JSON.stringify(data)
        });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const result = await response.json();
        showToaster('success', { message: result.messages });
      } catch (error) {
        console.error('Error updating course:', error);
        showToaster('danger', { message: 'Error updating course' });
      }
    }

    async function init() {
      const courseData = await fetchCourseData(courseId);
      if (courseData && courseData.data) {
        document.getElementById('courseName').value = courseData.data.name;
        document.getElementById('courseImage').src = courseData.data.image;
      }
    }

    form.addEventListener('submit', async (event) => {
      event.preventDefault();
      const name = document.getElementById('courseName').value;
      const image = document.getElementById('courseImageInput').files[0];
      let formData = new FormData();
      formData.append('name', name);
      if (image) {
        formData.append('image', image);
      }
      await updateCourse(courseId, formData);
    });

    init();
  </script>
{{/layout}}
