<div class="flex">
    {{> sidebar}}
    <div class="flex-1 flex flex-col gap-6 p-6 bg-gray-200 rounded-lg h-[calc(100vh-1rem)] overflow-auto">
        <div class="bg-white rounded-lg p-8 shadow-lg w-full max-w-4xl mx-auto">
            <div class="text-center mb-6">
                <h1 class="text-2xl font-bold text-[#0e88bc]">Edit Language</h1>
            </div>
            <form id="editLanguageForm">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    <div class="form-group">
                        <label class="block text-gray-700 font-bold mb-2">Current Language Image</label>
                        <img id="languageImage" src="image/blank.jpg" alt="Language Image"
                            class="w-full h-64 object-cover rounded-lg">
                    </div>
                    <div class="form-group">
                        <label class="block text-gray-700 font-bold mb-2">Upload New Image</label>
                        <input type="file" id="languageImageInput" name="image" class="w-full p-3 border border-gray-300 rounded-lg">
                    </div>
                </div>
                <div class="mb-6">
                    <label class="block text-gray-700 font-bold mb-2">Language Name</label>
                    <input type="text" id="languageName" name="name" placeholder="Language Name"
                        class="w-full p-3 border border-gray-300 rounded-lg" required>
                </div>
                <div class="flex justify-between items-center">
                    <button type="submit"
                        class="bg-[#0e88bc] text-white py-3 px-6 rounded-lg hover:bg-blue-500 transition-colors">Update
                        Language</button>
                    <a href="/languages" class="text-[#0e88bc] hover:text-blue-500 transition-colors">Back</a>
                </div>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            const form = document.getElementById('editLanguageForm');
            const languageId = window.location.pathname.split('/').pop(); // Extract language ID from URL

            async function fetchLanguageData(id) {
                try {
                    const response = await fetchAPI(`/api/languages/${id}`, 'GET');
                    if (response.messages) {
                        const languageData = response.data;
                        document.getElementById('languageName').value = languageData.name || '';
                        document.getElementById('languageImage').src = languageData.image || 'image/blank.jpg';
                    } else {
                        showToaster('danger', { message: 'Failed to fetch language data.' });
                    }
                } catch (error) {
                    console.error('Error fetching language data:', error);
                    showToaster('danger', { message: 'An error occurred while fetching language data.' });
                }
            }

            async function updateLanguage(id, data) {
                try {
                    const dataForm = Object.fromEntries(data.entries());
                    const { image, ...restOfData } = dataForm;
                    const response = await fetchAPI(`/api/languages/${id}`, 'PATCH', restOfData);

                    if(dataForm.image) {
                        await fetch(`/api/languages/${id}/image`, {
                            method: 'PATCH',
                            body: data,
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem('secure_dolphin_streak_usr_access_token')}`
                            }
                        });
                    }

                    if (response.messages) {
                        showToaster('success', { message: response.messages });
                    } else {
                        showToaster('danger', { message: 'Failed to update language.' });
                    }
                } catch (error) {
                    console.error('Error updating language:', error);
                    showToaster('danger', { message: 'An error occurred while updating the language.' });
                }
            }

            async function init() {
                await fetchLanguageData(languageId);
            }

            form.addEventListener('submit', async (event) => {
                event.preventDefault();
                const name = document.getElementById('languageName').value;
                const image = document.getElementById('languageImageInput').files[0];
                let formData = new FormData(form);
                await updateLanguage(languageId, formData);
            });

            init();
        });
    </script>
</div>