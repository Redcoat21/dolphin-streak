<div class="flex">
    {{> sidebar}}

    <div class="flex-grow p-6 bg-gray-100 overflow-auto">
        <div class="bg-white rounded-lg shadow-md p-6 border border-gray-300">
            <!-- Question List Section -->
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-xl font-semibold text-gray-700">List Questions</h3>
                <a href="/questions/add" class="btn btn-primary bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition-colors">
                    + Add New Question
                </a>
            </div>

            <div class="flex justify-between items-center mb-4">
                <div class="flex items-center gap-2">
                    <label for="perPage" class="text-sm text-gray-700">Items per page:</label>
                    <select id="perPage" class="border border-gray-300 rounded-md p-1 text-sm text-gray-700 focus:outline-none focus:border-blue-500">
                        <option value="5">5</option>
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                </div>
                <div id="pagination-controls" class="flex items-center gap-2">
                    <!-- Pagination controls will be added here -->
                </div>
            </div>

            <div class="overflow-x-auto">
                <table class="w-full bg-white shadow-md rounded-lg overflow-hidden border border-gray-300">
                    <thead class="bg-gray-100 border-b">
                        <tr>
                            <th class="p-3 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">ID</th>
                            <th class="p-3 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">Question</th>
                             <th class="p-3 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">Type</th>
                            <th class="p-3 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">Course</th>
                            <th class="p-3 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="question-list">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', async () => {
        let allQuestions = [];
        let currentPage = 1;
        let perPage = 10;
        const perPageSelect = document.getElementById('perPage');
        const paginationControls = document.getElementById('pagination-controls');
        const questionListElement = document.getElementById('question-list');

        const fetchQuestions = async () => {
            try {
                const response = await fetchAPI('/api/questions', 'GET');
                if (response.messages.toString().includes("questions found")) {
                    allQuestions = response.data;
                    renderTable();
                    renderPagination();
                } else {
                    console.error(response.messages);
                    showToaster('danger', { message: 'Failed to fetch question data.' });
                }
            } catch (error) {
                console.error('Error fetching question data:', error);
                showToaster('danger', { message: 'An error occurred while fetching question data.' });
            }
        };

        const renderTable = () => {
            questionListElement.innerHTML = '';
            const startIndex = (currentPage - 1) * perPage;
            const endIndex = startIndex + perPage;
            const currentQuestions = allQuestions.slice(startIndex, endIndex);

            currentQuestions.forEach(question => {
                const questionText = question.question?.text || 'N/A';
                const questionType = question.type === 0 ? 'Multiple Choice' : question.type === 1 ? 'Essay' : question.type === 2 ? 'Fill In' : question.type === 3 ? 'Voice' : 'Unknown';
                const courseName = question.courses && question.courses.length > 0 ? question.courses[0].name : 'N/A';

                const row = `
                    <tr>
                        <td class="p-3 text-sm text-gray-700">${question._id}</td>
                        <td class="p-3 text-sm text-gray-700">${questionText}</td>
                         <td class="p-3 text-sm text-gray-700">${questionType}</td>
                        <td class="p-3 text-sm text-gray-700">${courseName}</td>
                        <td class="p-3">
                            <div class="flex space-x-2">
                                <a href="/questions/edit/${question._id}" class="bg-blue-500 text-white py-1 px-3 rounded hover:bg-blue-600 transition-colors">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                                <button onclick="confirmDelete('${question._id}')" class="bg-red-500 text-white py-1 px-3 rounded hover:bg-red-600 transition-colors">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>`;
                questionListElement.insertAdjacentHTML('beforeend', row);
            });
        };

        const renderPagination = () => {
            paginationControls.innerHTML = '';
            const totalPages = Math.ceil(allQuestions.length / perPage);

            const createButton = (text, page, isDisabled = false) => {
                const button = document.createElement('button');
                button.textContent = text;
                button.classList.add('px-2', 'py-1', 'rounded', 'border', 'border-gray-300', 'text-gray-700', 'hover:bg-gray-200', 'disabled:opacity-50', 'disabled:cursor-not-allowed');
                if (isDisabled) {
                    button.disabled = true;
                } else {
                    button.addEventListener('click', () => {
                        currentPage = page;
                        renderTable();
                        renderPagination();
                    });
                }
                return button;
            };

            if (totalPages <= 1) return;

            paginationControls.appendChild(createButton('Prev', currentPage - 1, currentPage === 1));

            // Display first page button
            if (currentPage > 2) {
                paginationControls.appendChild(createButton('1', 1));
                if (currentPage > 3) {
                    const dots = document.createElement('span');
                    dots.textContent = '...';
                    dots.classList.add('text-gray-700');
                    paginationControls.appendChild(dots);
                }
            }

            // Display current page and adjacent pages
            for (let i = Math.max(1, currentPage - 1); i <= Math.min(totalPages, currentPage + 1); i++) {
                const pageButton = createButton(i, i);
                if (i === currentPage) {
                    pageButton.classList.add('bg-blue-500', 'text-white', 'border-blue-500', 'hover:bg-blue-600');
                }
                paginationControls.appendChild(pageButton);
            }

            // Display last page button
            if (currentPage < totalPages - 1) {
                if (currentPage < totalPages - 2) {
                    const dots = document.createElement('span');
                    dots.textContent = '...';
                    dots.classList.add('text-gray-700');
                    paginationControls.appendChild(dots);
                }
                paginationControls.appendChild(createButton(totalPages, totalPages));
            }

            paginationControls.appendChild(createButton('Next', currentPage + 1, currentPage === totalPages));
        };

        perPageSelect.addEventListener('change', (e) => {
            perPage = parseInt(e.target.value, 10);
            currentPage = 1;
            renderTable();
            renderPagination();
        });

        fetchQuestions();
    });

    function confirmDelete(questionId) {
        showModal('warning', 'Are you sure?', 'Do you want to delete this question?', async () => {
            try {
                const response = await fetchAPI(`/api/questions/${questionId}`, 'DELETE');
                if (response.ok) {
                    showToaster('success', { message: 'Question deleted successfully.' });
                    window.location.reload();
                } else {
                    showToaster('danger', { message: 'Failed to delete question.' });
                }
            } catch (error) {
                console.error('Error deleting question:', error);
                showToaster('danger', { message: 'An error occurred while deleting the question.' });
            }
        });
    }
</script>
