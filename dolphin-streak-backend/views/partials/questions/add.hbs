<div class="flex">
    {{> sidebar}}

    <div class="flex-grow p-6 bg-gray-100 overflow-auto">
        <div class="bg-white rounded-lg shadow-md p-6 border border-gray-300">
            <h3 class="text-xl font-semibold text-gray-700 mb-6">Add New Question</h3>
            <form id="add-question-form">
                <div class="mb-4">
                    <label for="questionType" class="block text-gray-700 text-sm font-bold mb-2">Question Type</label>
                    <select id="questionType" name="type" class="border border-gray-300 rounded-md p-2 w-full text-sm text-gray-700 focus:outline-none focus:border-blue-500">
                        <option value="0">Multiple Choice</option>
                        <option value="1">Essay</option>
                        <option value="2">Fill In</option>
                        <option value="3">Voice</option>
                        <option value="4">Writing</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label for="questionText" class="block text-gray-700 text-sm font-bold mb-2">Question Text</label>
                    <textarea id="questionText" name="text" class="border border-gray-300 rounded-md p-2 w-full text-sm text-gray-700 focus:outline-none focus:border-blue-500" rows="4"></textarea>
                </div>
                 <div class="mb-4" id="answer-options-container">
                    <label class="block text-gray-700 text-sm font-bold mb-2">Answer Options</label>
                    <div id="answer-options">
                        <div class="flex gap-2 mb-2">
                            <input type="text" name="answerOptions[]" class="border border-gray-300 rounded-md p-2 w-full text-sm text-gray-700 focus:outline-none focus:border-blue-500" placeholder="Option 1"/>
                        </div>
                         <div class="flex gap-2 mb-2">
                            <input type="text" name="answerOptions[]" class="border border-gray-300 rounded-md p-2 w-full text-sm text-gray-700 focus:outline-none focus:border-blue-500" placeholder="Option 2"/>
                        </div>
                         <div class="flex gap-2 mb-2">
                            <input type="text" name="answerOptions[]" class="border border-gray-300 rounded-md p-2 w-full text-sm text-gray-700 focus:outline-none focus:border-blue-500" placeholder="Option 3"/>
                        </div>
                         <div class="flex gap-2 mb-2">
                            <input type="text" name="answerOptions[]" class="border border-gray-300 rounded-md p-2 w-full text-sm text-gray-700 focus:outline-none focus:border-blue-500" placeholder="Option 4"/>
                        </div>
                    </div>
                </div>
                <div class="mb-4" id="correct-answer-container">
                    <label for="correctAnswer" class="block text-gray-700 text-sm font-bold mb-2">Correct Answer (index)</label>
                    <input type="text" id="correctAnswer" name="correctAnswer" class="border border-gray-300 rounded-md p-2 w-full text-sm text-gray-700 focus:outline-none focus:border-blue-500" placeholder="e.g., 0 for the first option"/>
                </div>
                <div class="mb-4">
                    <label for="courseId" class="block text-gray-700 text-sm font-bold mb-2">Course</label>
                    <select id="courseId" name="courses" class="border border-gray-300 rounded-md p-2 w-full text-sm text-gray-700 focus:outline-none focus:border-blue-500">
                    </select>
                </div>
                <div class="mb-4">
                    <label for="useAi" class="block text-gray-700 text-sm font-bold mb-2">Use AI</label>
                    <input type="checkbox" id="useAi" name="useAi" class="border border-gray-300 rounded-md p-2 text-sm text-gray-700 focus:outline-none focus:border-blue-500"/>
                </div>
                <button type="submit" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition-colors">Add Question</button>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', async () => {
        const form = document.getElementById('add-question-form');
        const courseSelect = document.getElementById('courseId');
        const answerOptionsContainer = document.getElementById('answer-options-container');
        const correctAnswerContainer = document.getElementById('correct-answer-container');
        const questionTypeSelect = document.getElementById('questionType');
        const useAiCheckbox = document.getElementById('useAi');


        const fetchCourses = async () => {
            try {
                const response = await fetchAPI('/api/courses', 'GET');
                 if (response.messages.toString().includes("courses found")) {
                    const courses = response.data;
                    courses.forEach(course => {
                        const option = document.createElement('option');
                        option.value = course._id;
                        option.textContent = course.name;
                        courseSelect.appendChild(option);
                    });
                } else {
                    console.error(response.messages);
                    showToaster('danger', { message: 'Failed to fetch course data.' });
                }
            } catch (error) {
                console.error('Error fetching course data:', error);
                 showToaster('danger', { message: 'An error occurred while fetching course data.' });
            }
        };

        questionTypeSelect.addEventListener('change', () => {
            const selectedType = parseInt(questionTypeSelect.value, 10);
            if (selectedType === 0) { // Multiple Choice
                answerOptionsContainer.style.display = 'block';
                correctAnswerContainer.style.display = 'block';
                useAiCheckbox.checked = false;
            } else if (selectedType === 1) { // Essay
                answerOptionsContainer.style.display = 'none';
                correctAnswerContainer.style.display = 'none';
                useAiCheckbox.checked = true;
            } else if (selectedType === 2) { // Fill In
                 answerOptionsContainer.style.display = 'none';
                correctAnswerContainer.style.display = 'block';
                useAiCheckbox.checked = false;
            } else if (selectedType === 3) { // Voice
                 answerOptionsContainer.style.display = 'none';
                correctAnswerContainer.style.display = 'block';
                useAiCheckbox.checked = true;
            } else if (selectedType === 4) { // Writing
                 answerOptionsContainer.style.display = 'none';
                correctAnswerContainer.style.display = 'none';
                useAiCheckbox.checked = false;
            } else {
                answerOptionsContainer.style.display = 'none';
                correctAnswerContainer.style.display = 'none';
                useAiCheckbox.checked = false;
            }
        });

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = new FormData(form);
            const questionType = formData.get('type');
            const questionText = formData.get('text');
            const useAi = formData.get('useAi') === 'on';
            const courseId = formData.get('courses');
            let answerOptions = [];
            let correctAnswer = null;

            if (questionType === '0') {
                answerOptions = formData.getAll('answerOptions[]').filter(option => option !== '');
                correctAnswer = [formData.get('correctAnswer')];
            } else if (questionType === '2' || questionType === '3') {
                correctAnswer = [formData.get('correctAnswer')];
            }

            const payload = {
                type: parseInt(questionType, 10),
                question: {
                    type: 'text',
                    text: questionText,
                },
                useAi: useAi,
                courses: [courseId],
                ...(answerOptions.length > 0 && { answerOptions }),
                ...(correctAnswer && { correctAnswer }),
            };

            try {
                const response = await fetchAPI('/api/questions', 'POST', payload);
                if (response.messages.toString().includes("Question created successfully")) {
                    showToaster('success', { message: 'Question added successfully.' });
                    window.location.href = '/questions';
                } else {
                    showToaster('danger', { message: 'Failed to add question.' });
                }
            } catch (error) {
                console.error('Error adding question:', error);
                showToaster('danger', { message: 'An error occurred while adding the question.' });
            }
        });

        fetchCourses();
    });
</script>